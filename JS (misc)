Special Characters
\t  = Tab
\\ = backslash
\n = new line
\r = carriage return

Common Methods:
+=
++
--
<=
>=
var.length = length
var.charAt(index) = gets index at string
str.toUpperCase(); = duh
str.toLowerCase(); = guess what it does
Math.pow(4, 3) = exponent (3 ^ 4)
array.pop();   = returns last value and deletes it from array
array.push(); = adds item to last position
array.shift(); = returns the front of the array and deletes it
array.map(()=>{}); =  iterates through array and runs the func against every element
var.toFixed(decimalplaces) = shows as many decimal places as prescribed
isNaN(var) = returns true if var is not a number
Number.isInteger(var) = returns true if var is an int
Object.keys(obj).forEach((i) => {console.log(i)}) = goes through each key in the object and runs a func on it, with i being passed to the func

Random number generator:

/**
 * Returns a random integer between min (inclusive) and max (inclusive)
 * Using Math.round() will give you a non-uniform distribution!
 */
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

Check for invalid charactrers:

/**
 * The following JavaScript code accepts letters (a-z and A-Z), numbers (0-9), spaces, hyphen(-), comma(,), and underscore(_) characters.
 */
function invalidCharacters(str){
  if(/^[a-zA-Z0-9- ,_]*$/.test(str) == false){
    return true;
  }
  return false;
}

Validate Email:

/**
 * Checks if a string is a valid email
 */
function validateEmail(mail) {
    if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(mail)) {
      return (true)
    }
      return (false)
  }

Ternanry Condition:

Condition ?  <code if true> :  <code if false> ;

Hoisting:
1. Variables (var x - undefined)
2. Declared functions (function x() {}) <- done in order with overwrites
3. Actual code (this includes func expressions!)

Switch Block:

switch (var1) {
  case <values that compares to var1>  :
    <code runs>
    break;
  case <values that compares to var1>:
    <code runs>
    break;
case <values that compares to var1>:
    <code runs>
    break;
  default;
    <code runs if no case equals var1>;
}

Promises (To-do Research more):

  Promise Chain:

    /**
     * Gets each team's roster
     *
     * @param {integer} tournamentID from req params
     * @returns {array}
     */
    function getTeamRoster(tournamentID){
      return knex
       .select("tournaments.name", "users.battlenet_id","teams.team_name", "team_id", "level", "games_won", "medal_gold", "medal_silver", "medal_bronze", "users.id", "first_role", "second_role")
       .from("enrollments")
       .innerJoin("users", "users.id", "enrollments.user_id")
       .innerJoin("tournaments", "tournaments.id", "enrollments.tournament_id")
       .innerJoin("teams", "enrollments.team_id", "teams.id")
       .where({"enrollments.tournament_id": tournamentID})
       .orderBy("team_id", "ascd")
       .then((playerStats) => {
         return _.groupBy(playerStats, "team_id");
       });
    }


    getTeamEmails(req.params.id, req.body.teams)
      .then(function(result) {
        //Do stuff with the results of getTeamRoster
      }).then(function(result) {
        return loadScript("/article/promise-chaining/two.js");
        //load script is some other async function?
      }).then(function(result) {

      });;



