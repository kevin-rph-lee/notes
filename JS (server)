Http Responses Codes:

res.sendStatus(XXX)
400 = Bad Request, The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, size too large, invalid request message framing, or deceptive request routing)
401 = Unauthorized/unauthenticaded
403 = Request valid, but server is refusing action (permissions)
404 = Not found

res.status(400).send('Invalid email format!')
//To read in catch block, use: err.responseText

res.render('<EJS file name in views folder>',{<template vars> key: value});

GET VS POST data:

req.query.<var> = data within a get request
req.body.<var> = data within a post request
req.params.<var> = data from either GET or POST within params
//router.get("/:id/admin", (req, res) => {
//  console.log(req.params.id);
//})


KNEX (https://devhints.io/knex):

  datatypes:
    table.increments('id')
    table.string('account_name')
    table.integer('age')
    table.float('age')
    table.decimal('balance', 8, 2)
    table.boolean('is_admin')
    table.date('birthday')
    table.time('created_at')
    table.timestamp('created_at').defaultTo(knex.fn.now())
    table.json('profile')
    table.jsonb('profile')
    table.uuid('id').primary()

    table.unique('email')
    table.unique(['email', 'company_id'])

  Where:

    Basic Select:
      knex
        .select("brackets")
        .from("tournaments")
        .where({id: tournamentID})
        .then((results) => {
          //WILL ALWAYS RETURN AN ARRAY
          res.json(results[0]);
        });

    And:
      knex
        .select("brackets")
        .from("tournaments")
        .where({id: tournamentID, name: 'My tournament'})
        .then((results) => {
          //WILL ALWAYS RETURN AN ARRAY
          res.json(results[0]);
        });

    Or:
      knex
        .select("brackets")
        .from("tournaments")
        .where({id: tournamentID})
        .orWhere({name: 'My Tournament'})
        .then((results) => {
          //WILL ALWAYS RETURN AN ARRAY
          res.json(results[0]);
        });


  Inner Join:

  knex
    .select("tournament_id", "tournaments.name", "tournaments.is_started")
    .from("enrollments")
    .innerJoin("tournaments", "tournaments.id", "enrollments.tournament_id")
    .innerJoin("users", "users.id", "enrollments.user_id")
    .where({ 'users.id': req.params.id })
    .then((results) => {});

  Update:

  knex('users')
    .where({ id:req.params.id })
    .update({ avatar:results.profile.avatar })
    .then(()=>{});

